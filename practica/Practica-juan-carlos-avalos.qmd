---
format: html
editor: visual
  markdown: 
    wrap: 72
---

Vasmos a cargar el dataset de AirBnB descargado de [aquí](https://public.opendatasoft.com/explore/dataset/airbnb-listings/export/?disjunctive.host_verifications&disjunctive.amenities&disjunctive.features&q=Madrid&dataChart=eyJxdWVyaWVzIjpbeyJjaGFydHMiOlt7InR5cGUiOiJjb2x1bW4iLCJmdW5jIjoiQ09VTlQiLCJ5QXhpcyI6Imhvc3RfbGlzdGluZ3NfY291bnQiLCJzY2llbnRpZmljRGlzcGxheSI6dHJ1ZSwiY29sb3IiOiJyYW5nZS1jdXN0b20ifV0sInhBeGlzIjoiY2l0eSIsIm1heHBvaW50cyI6IiIsInRpbWVzY2FsZSI6IiIsInNvcnQiOiIiLCJzZXJpZXNCcmVha2Rvd24iOiJyb29tX3R5cGUiLCJjb25maWciOnsiZGF0YXNldCI6ImFpcmJuYi1saXN0aW5ncyIsIm9wdGlvbnMiOnsiZGlzanVuY3RpdmUuaG9zdF92ZXJpZmljYXRpb25zIjp0cnVlLCJkaXNqdW5jdGl2ZS5hbWVuaXRpZXMiOnRydWUsImRpc2p1bmN0aXZlLmZlYXR1cmVzIjp0cnVlfX19XSwidGltZXNjYWxlIjoiIiwiZGlzcGxheUxlZ2VuZCI6dHJ1ZSwiYWxpZ25Nb250aCI6dHJ1ZX0%3D&location=16,41.38377,2.15774&basemap=jawg.streets)

![](descargar.png)

```{r}
airbnb<-read.csv('airbnb-listings.csv',sep = ';')
options(repr.plot.height=4,repr.plot.width=6,repr.plot.res = 300)
```

1.  Vamos a quedarnos con las columnas de mayor interés: 'City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet',

    'Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude'

    Nos quedarmos solo con las entradas de Madrid para Room.Type=="Entire home/apt" y cuyo barrio (Neighbourhood) no está vacio "''

    Podemos eliminar las siguientes columnas que ya no son necesarias:

    "Room.Type",'City'

    Llama a nuevo dataframe df_madrid.

```{r}
head(airbnb)

```

```{r}
str(airbnb)

```

```{r}
colnames(airbnb)

```

```{r}
library(dplyr)
```

```{r}
# Vamos a quedarnos con las columnas de mayor interés: 
#'City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds',
#'Price', 'Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating',
#'Latitude', 'Longitude'
airbnb |> select(City, Room.Type, Neighbourhood, Accommodates, Bathrooms, Bedrooms, Beds, 
                 Price,Square.Feet, Guests.Included, Extra.People, Review.Scores.Rating,
                 Latitude, Longitude) -> airbnb_selected_columns

colnames(airbnb_selected_columns)
```

```{r}
#Nos quedarmos solo con las entradas de Madrid para 
# Room.Type=="Entire home/apt" 
# y cuyo barrio (Neighbourhood) no está vacio "'' 
airbnb_selected_columns |> filter(grepl('Madrid', City, ignore.case = TRUE), 
                                  Room.Type=="Entire home/apt", 
                                  Neighbourhood !="") -> airbnb_madrid

airbnb_madrid
```

```{r}
#Podemos eliminar las siguientes columnas que ya no son necesarias: 

#"Room.Type",'City' 

#Llama a nuevo dataframe df_madrid.
airbnb_madrid |> select(-c(Room.Type, City)) -> df_madrid

colnames(df_madrid)

```

------------------------------------------------------------------------

2.  Crea una nueva columna llamada Square.Meters a partir de Square.Feet.

    Recuerda que un pie cuadrado son 0.092903 metros cuadrados.

```{r}
df_madrid |> mutate(Square.Meters= Square.Feet * 0.092903) -> df_madrid

df_madrid |> select(Square.Feet, Square.Meters)
```

------------------------------------------------------------------------

3.  ¿Que porcentaje de los apartamentos no muestran los metros cuadrados? Es decir, ¿cuantos tienen NA en Square.Meters?

```{r}
df_madrid |> select(Square.Meters) |> 
  filter(is.na(Square.Meters)) |> 
  summarise(Percentage = n() / nrow(df_madrid) * 100, Count = n(), Total = nrow(df_madrid)) ->
  df_madrid_na_square_meters

total_elements <- df_madrid_na_square_meters$Total
total_na_sm <- df_madrid_na_square_meters$Count
percentage_na_sm <- df_madrid_na_square_meters$Percentage

cat(paste("Total de elementos:", total_elements, 
      "\nTotal de NA en Square.Meters:", total_na_sm,
      "\nPorcentaje de NA Square.Meters:", percentage_na_sm))

```

------------------------------------------------------------------------

4.  De todos los apartamentos que tienen un valor de metros cuadrados diferente de NA ¿Que porcentaje de los apartamentos tienen 0 metros cuadrados?

```{r}

total_not_na_sm <- total_elements - total_na_sm

df_madrid |> select(Square.Meters) |> 
  filter(!is.na(Square.Meters) & Square.Meters == 0) |> 
  summarise(Percentage = n() / total_not_na_sm * 100, Count = n(), PercentageTotal = n() / total_elements * 100) ->
  df_madrid_0_square_meters

total_0_sm <- df_madrid_0_square_meters$Count
percentage_0_sm <- df_madrid_0_square_meters$Percentage
percentage_total_0_sm <- df_madrid_0_square_meters$PercentageTotal

cat(paste("Total de NO NA elementos en Square.Meters:", total_not_na_sm, 
      "\nTotal de 0 en Square.Meters:", total_0_sm,
      "\nPorcentaje de 0 Square.Meters:", percentage_total_0_sm,
      "\nPorcentaje de 0 Sin considerar NA en Square.Meters:", percentage_0_sm))
```

------------------------------------------------------------------------

5.  Reemplazar todos los 0m\^2 por NA

```{r}

df_madrid |> mutate(Square.Meters = na_if(Square.Meters, 0)) -> df_madrid_sm_without_0

df_madrid_sm_without_0 |> filter(Square.Meters == 0)
```

------------------------------------------------------------------------

Hay muchos NAs, vamos a intentar crear un modelo que nos prediga cuantos son los metros cuadrados en función del resto de variables para tratar de rellenar esos NA. Pero **antes de crear el modelo** vamos a hacer: \* pintar el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más. \* crear una variable sintética nueva basada en la similitud entre barrios que usaremos en nuestro modelo.

6.  Pinta el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más

```{r}
library(ggplot2)
```

```{r}

ggplot(data=df_madrid_sm_without_0, aes(x=Square.Meters))+
  geom_histogram(fill='#7070BB', color='#2020EE', breaks=seq(-2,485, by=1))+
  geom_boxplot(color='red', width=6, alpha=0.5)+
  xlab('Square Meters')+scale_y_continuous(name='Cantidad', limits = c(-4,16), breaks = seq(-4, 16, by=2))

```

```{r}
boxplot(df_madrid_sm_without_0$Square.Meters,  horizontal = TRUE)
```

```{r}
quantiles_sm <- quantile(df_madrid_sm_without_0$Square.Meters, na.rm=TRUE)
quantiles_sm
q0 <- quantiles_sm[1]
q1 <- quantiles_sm[2]
q2 <- quantiles_sm[3]
q3 <- quantiles_sm[4]
q4 <- quantiles_sm[5]
```

```{r}
cat(paste("La mediana está en",q2, "m^2 y el rango entre Q1-Q3 va de", q1 ,"a",  q3))
cat(paste("\n\nVemos que tenemos 3 departamentos con 200 m^2 y 1 con 481 m^2"))
cat(paste("\nTambién vemos que hay departamentos con menos de 10 m^2"))
cat(paste("\nHabría que ver que se debe hacer. En el caso de los departamentos con más de 200 m^2 se los podría considerar outlayers y eliminarlos."))
```

------------------------------------------------------------------------

7.  Asigna el valor NA a la columna Square.Meters de los apartamentos que tengan menos de 20 m\^2

```{r}

df_madrid_sm_without_0 |> mutate(Square.Meters = replace(Square.Meters, Square.Meters < 20, NA)) -> df_madrid_sm_without_0_and_lt20

df_madrid_sm_without_0_and_lt20 |> filter(Square.Meters < 20)
```

------------------------------------------------------------------------

8.  Existen varios Barrios que todas sus entradas de Square.Meters son NA, vamos a eliminar del dataset todos los pisos que pertenecen a estos barrios.

    ------------------------------------------------------------------------

    ```{r}

    df_madrid_sm_without_0_and_lt20 |> group_by(Neighbourhood) |> 
      summarise(count = n(), count_na = sum(is.na(Square.Meters)), 
                all_na = n() == sum(is.na(Square.Meters))) -> df_madrid_neighbourhood_all_na

    df_madrid_neighbourhood_all_na |> filter(all_na == TRUE)
    ```

    ```{r}
    df_madrid_neighbourhood_all_na |> filter(all_na == TRUE) |> 
      select(Neighbourhood) -> df_madrid_neighbourhood_all_na_only_names

    df_madrid_neighbourhood_all_na_only_names
    ```

    ```{r}
    df_madrid_sm_without_0_and_lt20 |> filter(!Neighbourhood %in% df_madrid_neighbourhood_all_na_only_names$Neighbourhood) -> df_madrid_without_neighbourhood_with_all_na_sm

    df_madrid_without_neighbourhood_with_all_na_sm
    ```

    ```{r}
    df_madrid_without_neighbourhood_with_all_na_sm |> filter(Neighbourhood %in% df_madrid_neighbourhood_all_na_only_names$Neighbourhood)
    ```

------------------------------------------------------------------------

9.  ¿Tienen todos los barrios los mismos metros cuadrados de media? ¿Con que test lo comprobarías?

    ```{r}
    df_madrid_without_neighbourhood_with_all_na_sm |> group_by(Neighbourhood) |> 
      summarise(mean = mean(Square.Meters, na.rm = TRUE)) -> df_madrid_mean_neighbourhood

    df_madrid_mean_neighbourhood |> arrange(mean)
    ```

    ```{r}
    ggplot(data=df_madrid_mean_neighbourhood, aes(x=mean))+
      geom_histogram(fill='#7070BB', color='#2020EE', breaks=seq(0,300, by=1))+
      geom_boxplot(color='red', width=3, alpha=0.5)+
      xlab('MEAN Square Meters')+
      scale_y_continuous(name='count Neighbourhood', limits = c(-2,4), breaks = seq(-2, 4, by=2))
    ```

    ```{r}
    result_shapiro_test <- shapiro.test(df_madrid_mean_neighbourhood$mean)
    result_shapiro_test
    ```

    ```{r}
    cat(paste("El test de shapiro nos indica que NO es un distribución NORMAL"))
    cat(paste("\nEs un valor muy cercano a cero el p-value:", result_shapiro_test$p.value))
    ```

    ```{r}
    cat(paste("Como NO es una distribución NORMAL no podemos usar el test de ANOVA y usaremos Kruskal-Wallis"))
    ```

    ```{r}
    kruskal.test( mean ~ Neighbourhood, data=df_madrid_mean_neighbourhood)
    ```

------------------------------------------------------------------------

10. Vamos a agrupar los barrios por metros cuadrados. Podemos usar una matriz de similaridad de Tukey. Muestra como de similares o diferentes son los barrios si nos fijámos únicamente en los metros cuadrados de los pisos. ¿Como se diferencia la media del Barrio A al Barrio B? (Es decir, cual sería el pvalor suponiendo una H0 en la que las medias son iguales)

    ```{r}
    tky <- TukeyHSD(aov( Square.Meters ~ Neighbourhood, data=df_madrid_without_neighbourhood_with_all_na_sm))

    tky.result<-data.frame(tky$Neighbourhood)
    cn <-sort(unique(df_madrid_without_neighbourhood_with_all_na_sm$Neighbourhood))
    resm <- matrix(NA, length(cn),length(cn))
    rownames(resm) <- cn
    colnames(resm) <- cn
    resm[lower.tri(resm) ] <- round(tky.result$p.adj,4)
    resm[upper.tri(resm) ] <- t(resm)[upper.tri(resm)] 
    diag(resm) <- 1

    library(ggplot2)
    library(reshape2)

    dfResm <- melt(resm)
    ggplot(dfResm, aes(x=Var1, y=Var2, fill=value))+
      geom_tile(colour = "black")+
      geom_text(aes(label=paste(round(value*100,0),"%")),size = 3) +
      scale_fill_gradient(low = "white",high = "steelblue")+
      ylab("Class")+xlab("Class")+theme_bw()+
      theme(axis.text.x = element_text(angle = 90, hjust = 1),legend.position="none")
    ```

------------------------------------------------------------------------

11. En el punto anterior has creado una matriz de p-valores que indica como de parecidos son dos barrios. Si su pvalor es alto significa que los barrios son diferentes, si es bajo significa que los barrios se parecen. Esta matriz la podemos usar como matriz de distancia si restamos el pvalor a 1. Es decir si usamos como distancia 1-pvalor. De esta forma barrios con un pvalor alto tendrán una distancia mayor que aquellos con un pvalor bajo. Usando esta última métrica como matriz de distancias dibuja un dendrograma de los diferentes barrios.

------------------------------------------------------------------------

10. ¿Que punto de corte sería el aconsejable?, ¿cuantos clusters aparecen?

------------------------------------------------------------------------

11. Vamos a crear una nueva columna en el dataframe df_madrid con un nuevo identificador marcado por los clusters obtenidos. Esta columna la llamaremos neighb_id

------------------------------------------------------------------------

12. Vamos a crear dos grupos, uno test y otro train.

------------------------------------------------------------------------

13. Tratamos de predecir los metros cuadrados en función del resto de columnas del dataframe.

------------------------------------------------------------------------

14. Evaluar la calidad de vuestro modelo

------------------------------------------------------------------------

15. Si tuvieramos un anuncio de un apartamento para 6 personas (Accommodates), con 1 baño, con un precio de 80€/noche y 3 habitaciones en el barrio de Sol, con 3 camas y un review de 80. ¿Cuantos metros cuadrados tendría? Si tu modelo necesita algúna variable adicional puedes inventartela dentro del rango de valores del dataset. ¿Como varía sus metros cuadrados con cada habitación adicional?

------------------------------------------------------------------------

16. Rellenar los Square.Meters con valor NA con el estimado con el modelo anterior.

------------------------------------------------------------------------

17. Usar PCA para encontrar el apartamento más cercano a uno dado. Este algoritmo nos ayudaría a dado un apartamento que el algoritmo nos devolvería los 5 apartamentos más similares.

Crearemos una función tal que le pasemos un apartamento con los siguientes datos: \* Accommodates \* Bathrooms \* Bedrooms \* Beds \* Price \* Guests.Included \* Extra.People \* Review.Scores.Rating \* Latitude \* Longitude \* Square.Meters

y nos devuelva los 5 más similares de:

------------------------------------------------------------------------
